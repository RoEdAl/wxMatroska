#
# make-workdir.cmake
#

CMAKE_MINIMUM_REQUIRED(VERSION 3.23)

FUNCTION(RemoveLastChar Str)
	STRING(LENGTH ${Str} StrLen)
	MATH(EXPR StrLen1 "${StrLen}-1")
	STRING(SUBSTRING ${Str} 0 ${StrLen1} StrTrimmed)
	SET(CUE2MKC_WORKDIR ${StrTrimmed} PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(DownloadPkgSha1 UrlBase FileName Sha1Hash StatusMsg)
	CMAKE_PATH(APPEND CUE2MKC_DLDIR ${FileName} OUTPUT_VARIABLE PkgPath)
	
	IF(EXISTS ${PkgPath})
		FILE(SHA1 ${PkgPath} PkgHash)
		IF(NOT(${PkgHash} STREQUAL ${Sha1Hash}))
			MESSAGE(STATUS "[DL] ${FileName}: expected SHA-1: ${Sha1Hash}, computed SHA-1: ${PkgHash}")
			MESSAGE(STATUS "[DL] Invalid SHA-1 for file ${FileName}")
			FILE(REMOVE ${PkgPath})
		ELSE()
			MESSAGE(VERBOSE "[DL] File ${FileName} already downloaded")
			RETURN()
		ENDIF()
	ENDIF()
	
	MESSAGE(STATUS "[DL] ${StatusMsg}")
	MESSAGE(VERBOSE "[DL] ${UrlBase}/${FileName}")
	FILE(DOWNLOAD ${UrlBase}/${FileName} ${PkgPath}
		EXPECTED_HASH SHA1=${Sha1Hash}
		INACTIVITY_TIMEOUT 60
		TIMEOUT 300
	)
ENDFUNCTION()

SET(PARALLEL_LEVEL 4)
SET(WXWIDGETS_VERSION "3.2.0")
SET(WX_VER_COMPACT 32)

SET(INSTALL_MSVC ON)
SET(INSTALL_MINGW64 ON)

SET(CUE2MKC_WORKDIR ${CMAKE_SOURCE_DIR}/..)
CMAKE_PATH(ABSOLUTE_PATH CUE2MKC_WORKDIR NORMALIZE)
RemoveLastChar(${CUE2MKC_WORKDIR})

MESSAGE(STATUS "[CFG] wxWidgets version: ${WXWIDGETS_VERSION}")
MESSAGE(STATUS "[CFG] Workdir: ${CUE2MKC_WORKDIR}")
MESSAGE(STATUS "[CFG] Install MSVC: ${INSTALL_MSVC}")
MESSAGE(STATUS "[CFG] Install MinGW64: ${INSTALL_MINGW64}")

CMAKE_PATH(APPEND CUE2MKC_WORKDIR download OUTPUT_VARIABLE CUE2MKC_DLDIR)

# downloading

SET(URL_WXWIDGETS "http://github.com/wxWidgets/wxWidgets/releases/download/v${WXWIDGETS_VERSION}")
DownloadPkgSha1(${URL_WXWIDGETS} wxWidgets-${WXWIDGETS_VERSION}-headers.7z 75b5271d1a3f08f32557c7a8ca1782310ee279b4 "wxWidgets headers")
DownloadPkgSha1(${URL_WXWIDGETS} wxWidgets-${WXWIDGETS_VERSION}-docs-html.tar.bz2 9c9caa3b3ce30b7f8b1e30b7a6cc70353b21761d "wxWidgets docs")

IF(INSTALL_MSVC)
	DownloadPkgSha1(${URL_WXWIDGETS} wxMSW-${WXWIDGETS_VERSION}_vc14x_x64_Dev.7z 65ad095d125dea942b9a74339e0476d14a53e6af "wxWidgets dev libraries [MSVC x64]")
	DownloadPkgSha1(${URL_WXWIDGETS} wxMSW-${WXWIDGETS_VERSION}_vc14x_x64_ReleaseDLL.7z c5164b52771aac9973123cfdbeecc5fe8606faba "wxWidgets libraries [MSVC x64]")
	DownloadPkgSha1(${URL_WXWIDGETS} wxMSW-${WXWIDGETS_VERSION}_vc14x_x64_ReleasePDB.7z 61549c7f12ec7c3398160be3445476a812987f9f "wxWidgets PDBs [MSVC x64]")
ENDIF()

IF(INSTALL_MINGW64)
	SET(URL_MINGW64 "http://github.com/niXman/mingw-builds-binaries/releases/download/12.1.0-rt_v10-rev3")
	DownloadPkgSha1(${URL_MINGW64} x86_64-12.1.0-release-win32-seh-rt_v10-rev3.7z 3618baf9bb90c7c4d7b2bb419bc680995531d9cc "MinGW64 runtime")
	DownloadPkgSha1(${URL_WXWIDGETS} wxMSW-${WXWIDGETS_VERSION}_gcc1210_x64_Dev.7z 26a58b3dc1135163921910b69e0ac94f2cbd18a0 "wxWidgets dev libraries [MinGW64]")
	DownloadPkgSha1(${URL_WXWIDGETS} wxMSW-${WXWIDGETS_VERSION}_gcc1210_x64_ReleaseDLL.7z ca15f4ddc1d9ebf68a6a7764eda60a6369285b2d "wxWidgets libraries [MinGW64]")
ENDIF()

# extracting

CMAKE_PATH(APPEND CUE2MKC_WORKDIR wx-widgets OUTPUT_VARIABLE WXWIDGETS_DIR)

CMAKE_PATH(APPEND WXWIDGETS_DIR include msvc wx setup.h OUTPUT_VARIABLE WX_TEST_FILE)
IF(NOT EXISTS ${WX_TEST_FILE})
	MESSAGE(STATUS "[EXR] wxWidgets headers")
	FILE(ARCHIVE_EXTRACT INPUT ${CUE2MKC_DLDIR}/wxWidgets-${WXWIDGETS_VERSION}-headers.7z DESTINATION ${WXWIDGETS_DIR})
ENDIF()

CMAKE_PATH(APPEND WXWIDGETS_DIR docs index.html OUTPUT_VARIABLE WX_TEST_FILE)
IF(NOT EXISTS ${WX_TEST_FILE})
	MESSAGE(STATUS "[EXR] wxWidgets docs")
	FILE(ARCHIVE_EXTRACT INPUT ${CUE2MKC_DLDIR}/wxWidgets-${WXWIDGETS_VERSION}-docs-html.tar.bz2 DESTINATION ${WXWIDGETS_DIR})
	FILE(RENAME ${WXWIDGETS_DIR}/wxWidgets-${WXWIDGETS_VERSION}-docs-html ${WXWIDGETS_DIR}/docs NO_REPLACE)
ENDIF()

IF(INSTALL_MSVC)
	CMAKE_PATH(APPEND WXWIDGETS_DIR lib vc14x_x64_dll wxmsw32ud_core.lib OUTPUT_VARIABLE MSVC_TEST_FILE)
	IF(NOT EXISTS ${MSVC_TEST_FILE})
		MESSAGE(STATUS "[EXR] wxWidgets debug libraries [MSVC x64]")
		FILE(ARCHIVE_EXTRACT INPUT ${CUE2MKC_DLDIR}/wxMSW-${WXWIDGETS_VERSION}_vc14x_x64_Dev.7z DESTINATION ${WXWIDGETS_DIR})
	ENDIF()
	
	CMAKE_PATH(APPEND WXWIDGETS_DIR lib vc14x_x64_dll wxmsw32u_core_vc14x_x64.dll OUTPUT_VARIABLE MSVC_TEST_FILE)
	IF(NOT EXISTS ${MSVC_TEST_FILE})
		MESSAGE(STATUS "[EXR] wxWidgets libraries [MSVC x64]")
		FILE(ARCHIVE_EXTRACT INPUT ${CUE2MKC_DLDIR}/wxMSW-${WXWIDGETS_VERSION}_vc14x_x64_ReleaseDLL.7z DESTINATION ${WXWIDGETS_DIR})
	ENDIF()
	
	CMAKE_PATH(APPEND WXWIDGETS_DIR lib vc14x_x64_dll wxmsw32u_core_vc14x_x64.pdb OUTPUT_VARIABLE MSVC_TEST_FILE)
	IF(NOT EXISTS ${MSVC_TEST_FILE})
		MESSAGE(STATUS "[EXR] wxWidgets PDBs [MSVC x64]")
		FILE(ARCHIVE_EXTRACT INPUT ${CUE2MKC_DLDIR}/wxMSW-${WXWIDGETS_VERSION}_vc14x_x64_ReleasePDB.7z DESTINATION ${WXWIDGETS_DIR})
	ENDIF()	
ENDIF()

IF(INSTALL_MINGW64)
	CMAKE_PATH(APPEND CUE2MKC_WORKDIR mingw64 OUTPUT_VARIABLE MINGW_DIR)
	IF(NOT EXISTS ${MINGW_DIR})
		MESSAGE(STATUS "[EXR] MinGW64 runtime")
		FILE(ARCHIVE_EXTRACT INPUT ${CUE2MKC_DLDIR}/x86_64-12.1.0-release-win32-seh-rt_v10-rev3.7z DESTINATION ${CUE2MKC_WORKDIR})
	ENDIF()
	
	CMAKE_PATH(APPEND WXWIDGETS_DIR lib gcc1210_x64_dll libwxbase32ud.a OUTPUT_VARIABLE MW64_TEST_FILE)
	IF(NOT EXISTS ${MW64_TEST_FILE})
		MESSAGE(STATUS "[EXR] wxWidgets libraries [MinGW64]")
		FILE(ARCHIVE_EXTRACT INPUT ${CUE2MKC_DLDIR}/wxMSW-${WXWIDGETS_VERSION}_gcc1210_x64_Dev.7z DESTINATION ${WXWIDGETS_DIR})
	ENDIF()
	
	MESSAGE(DEBUG "[EXR] wxWidgets libraries #1 [MinGW64]")
	FILE(ARCHIVE_EXTRACT INPUT ${CUE2MKC_DLDIR}/wxMSW-${WXWIDGETS_VERSION}_gcc1210_x64_ReleaseDLL.7z DESTINATION ${WXWIDGETS_DIR})
ENDIF()

# MINGW toolchain

IF(INSTALL_MINGW64)
	CMAKE_PATH(APPEND MINGW_DIR mingw-toolchain.cmake OUTPUT_VARIABLE MW64_TOOLCHAIN_FILE)
	IF(NOT EXISTS ${MW64_TOOLCHAIN_FILE})
		MESSAGE(STATUS "[CFGF] Toolchain: ${MW64_TOOLCHAIN_FILE}")
		CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/tmpl/mingw-toolchain.cmake ${MW64_TOOLCHAIN_FILE} NO_SOURCE_PERMISSIONS @ONLY)
	ENDIF()
ENDIF()

# wxWidgets configuration

IF(INSTALL_MSVC)
	CMAKE_PATH(APPEND WXWIDGETS_DIR msvc-config.cmake OUTPUT_VARIABLE MSVC_CFG_USE_FILE)
	IF(NOT EXISTS ${MSVC_CFG_USE_FILE})
		MESSAGE(STATUS "[CFGF] MSVC ${MSVC_CFG_USE_FILE}")
		CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/tmpl/msvc-config.cmake ${MSVC_CFG_USE_FILE} NO_SOURCE_PERMISSIONS @ONLY)
	ENDIF()
ENDIF()

IF(INSTALL_MINGW64)
	CMAKE_PATH(APPEND WXWIDGETS_DIR mingw64-config.cmake OUTPUT_VARIABLE MW64_CFG_USE_FILE)
	IF(NOT EXISTS ${MW64_CFG_USE_FILE})
		MESSAGE(STATUS "[CFGF] MinGW64 ${MW64_CFG_USE_FILE}")
		CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/tmpl/mingw64-config.cmake ${MW64_CFG_USE_FILE} NO_SOURCE_PERMISSIONS @ONLY)
	ENDIF()
ENDIF()

# presets file: CMakeUserPresets.json

CMAKE_PATH(APPEND CMAKE_SOURCE_DIR CMakeUserPresets.json OUTPUT_VARIABLE PRESETS_FILE)
IF(NOT EXISTS ${PRESETS_FILE})
	MESSAGE(STATUS "[CFGF] Preset ${PRESETS_FILE}")
	CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/tmpl/CMakePresets.json ${PRESETS_FILE} NO_SOURCE_PERMISSIONS @ONLY)
ENDIF()
