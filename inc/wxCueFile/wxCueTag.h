/*
 * wxCueTag.h
 */

#ifndef _WX_CUE_TAG_H_
#define _WX_CUE_TAG_H_

#ifndef _WX_TAG_SYNONIMS_H_
class wxTagSynonimsCollection;
#endif

#ifndef _WX_STRING_PROCESSOR_H_
class wxStringProcessor;
#endif

class wxCueTag;
WX_DECLARE_OBJARRAY(wxCueTag, wxArrayCueTag);
WX_DECLARE_STRING_HASH_MAP(wxArrayCueTag, wxHashArrayCueTag);

class wxCueTag
{
    public:

    enum TAG_SOURCE
    {
        TAG_UNKNOWN = 0,
        TAG_CD_TEXT = 1,
        TAG_CUE_COMMENT = 2,
        TAG_MEDIA_METADATA = 4,
        TAG_AUTO_GENERATED = 8
    };

    typedef wxUint32 TagSources;

    struct Name
    {
        static const char CUESHEET[];
        static const char TOTALTRACKS[];
        static const char TRACKNUMBER[];
        static const char ARRANGER[];
        static const char COMPOSER[];
        static const char ISRC[];
        static const char TITLE[];
        static const char ALBUM[];
        static const char PERFORMER[];
        static const char ARTIST[];
        static const char ALBUM_ARTIST[];
        static const char ALBUMARTIST[];
        static const char CATALOG[];
        static const char CDTEXTFILE[];
        static const char DISC_ID[];
        static const char DISCID[];
        static const char GENRE[];
        static const char MESSAGE[];
        static const char SONGWRITER[];
        static const char UPC_EAN[];
        static const char SIZE_INFO[];
        static const char TOC_INFO[];
        static const char TOC_INFO2[];
        static const char DISCNUMBER[];
        static const char TOTALDISCS[];
        static const char RELEASECOUNTRY[];
        static const char COMMENT[];
        static const char RIPPER[];
        static const char PREPARER[];
        static const char DR14[];
        static const char DR14_ALBUM[];
    };

    public:

    wxCueTag();
    wxCueTag(const wxCueTag&);
    wxCueTag(TAG_SOURCE, const wxString&, const wxString&);

    TAG_SOURCE GetSource() const;
    wxString GetSourceAsString() const;
    bool TestSource(TagSources) const;
    bool IsAutoGenerated() const;

    const wxString& GetName() const;

    const wxString& GetValue() const;
    wxString GetValueBase64() const;
    void GetValueBase64(size_t, wxArrayString&) const;
    const wxCueTag& GetValue(wxArrayString&) const;
    wxString GetQuotedValue(bool = true) const;
    bool IsMultiline() const;
    wxString GetFlattenValue() const;
    wxString GetFlattenValue(const wxString&) const;
    bool IsReplayGain() const;
    bool IsRipperComment() const;
    bool IsITunes() const;

    wxCueTag& SetSource(TAG_SOURCE);
    wxCueTag& SetName(const wxString&);
    wxCueTag& SetValue(const wxString&);

    bool operator ==(const wxString&) const;
    bool operator !=(const wxString&) const;
    bool operator ==(const wxCueTag&) const;
    wxCueTag& operator =(const wxCueTag&);

    void Correct(const wxStringProcessor&);
    bool Split(wxArrayCueTag&) const;

    wxCueTag Rename(const wxString&) const;

    protected:

    TAG_SOURCE m_source;
    wxString m_name;
    wxString m_value;
    bool m_multiline;

    protected:

    struct SOURCE2TEXT
    {
        TAG_SOURCE source;
        const char* const text;
    };

    static const SOURCE2TEXT SOURCE2TEXT_MAPPING[];

    public:

    static wxString SourceToString(TAG_SOURCE);
    static wxString SourcesToString(TagSources);
    static bool TestTagSources(TagSources, TagSources);

    static size_t GetTags(const wxArrayCueTag&, const wxString&, wxArrayCueTag&);

    static size_t GetTags(const wxArrayCueTag&, TagSources, const wxString&, wxArrayCueTag&);
    static size_t MoveTags(wxArrayCueTag&, const wxString&, wxArrayCueTag&);
    static size_t MoveTags(wxArrayCueTag&, const wxTagSynonimsCollection&, wxArrayCueTag&);
    static bool FindTag(const wxArrayCueTag&, const wxCueTag&);
    static bool AddTag(wxArrayCueTag&, const wxCueTag&);
    static bool AddTagIf(wxArrayCueTag&, const wxCueTag&, const wxCueTag&);
    static bool AddTagIfAndRemove(wxArrayCueTag&, const wxCueTag&, const wxCueTag&);
    static size_t RemoveTag(wxArrayCueTag&, const wxCueTag&);
    static size_t RemoveTag(wxArrayCueTag&, const wxString&);
    static void AddTags(wxArrayCueTag&, const wxArrayCueTag&);
    static void AddTags(wxArrayCueTag&, const wxHashArrayCueTag&);
    static size_t RemoveTags(wxArrayCueTag&, const wxArrayCueTag&);
    static void CommonTags(wxArrayCueTag&, const wxArrayCueTag&, const wxArrayCueTag&);
    static bool FindCommonPart(wxCueTag&, const wxCueTag&, const wxCueTag&);
    static wxString GetFlattenValues(const wxArrayCueTag&, const wxString&);
    static wxString Quote(const wxString&);
    static wxString Escape(const wxString&);
    static wxString UnEscape(const wxString&);
    static bool Split(const wxCueTag&, wxArrayCueTag&);

    protected:

    void copy(const wxCueTag&);

    protected:

    template< size_t SIZE >
    static wxString SourceToString(wxCueTag::TAG_SOURCE eSource, const SOURCE2TEXT(&source2text_mapping)[SIZE])
    {
        for (size_t i = 0; i < SIZE; ++i)
        {
            if (eSource == source2text_mapping[i].source) return _(source2text_mapping[i].text);
        }

        return wxString::Format("TAG_SOURCE <%d>", eSource);
    }

    template< size_t SIZE >
    static wxString SourcesToString(wxCueTag::TagSources nTagSources, const SOURCE2TEXT(&source2text_mapping)[SIZE])
    {
        wxString s;

        for (size_t i = 0; i < SIZE; ++i)
        {
            if ((nTagSources & source2text_mapping[i].source) != 0u) s << source2text_mapping[i].text << ',';
        }

        if (!s.IsEmpty()) s.RemoveLast();

        return s;
    }
};

#endif

