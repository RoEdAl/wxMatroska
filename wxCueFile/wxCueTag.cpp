/*
 * wxCueTag.cpp
 */
#include <wxCueFile/wxCueTag.h>
#include <wxCueFile/wxStringProcessor.h>
#include <wxCueFile/wxTagSynonims.h>
#include <wxEncodingDetection/wxTextStreamUtils.h>
#include <wxEncodingDetection/wxTextOutputStreamOnString.h>
#include <wxEncodingDetection/wxTextInputStreamOnString.h>

 // ===============================================================================

const char wxCueTag::Name::CUESHEET[] = "CUESHEET";
const char wxCueTag::Name::TOTALTRACKS[] = "TOTALTRACKS";
const char wxCueTag::Name::TRACKNUMBER[] = "TRACKNUMBER";
const char wxCueTag::Name::ARRANGER[] = "ARRANGER";
const char wxCueTag::Name::COMPOSER[] = "COMPOSER";
const char wxCueTag::Name::ISRC[] = "ISRC";
const char wxCueTag::Name::TITLE[] = "TITLE";
const char wxCueTag::Name::ALBUM[] = "ALBUM";
const char wxCueTag::Name::PERFORMER[] = "PERFORMER";
const char wxCueTag::Name::ARTIST[] = "ARTIST";
const char wxCueTag::Name::ALBUM_ARTIST[] = "ALBUM ARTIST";
const char wxCueTag::Name::ALBUMARTIST[] = "ALBUMARTIST";
const char wxCueTag::Name::CATALOG[] = "CATALOG";
const char wxCueTag::Name::CDTEXTFILE[] = "CDTEXTFILE";
const char wxCueTag::Name::DISC_ID[] = "DISC_ID";
const char wxCueTag::Name::DISCID[] = "DISCID";
const char wxCueTag::Name::GENRE[] = "GENRE";
const char wxCueTag::Name::MESSAGE[] = "MESSAGE";
const char wxCueTag::Name::SONGWRITER[] = "SONGWRITER";
const char wxCueTag::Name::UPC_EAN[] = "UPC_EAN";
const char wxCueTag::Name::SIZE_INFO[] = "SIZE_INFO";
const char wxCueTag::Name::TOC_INFO[] = "TOC_INFO";
const char wxCueTag::Name::TOC_INFO2[] = "TOC_INFO2";
const char wxCueTag::Name::DISCNUMBER[] = "DISCNUMBER";
const char wxCueTag::Name::TOTALDISCS[] = "TOTALDISCS";
const char wxCueTag::Name::RELEASECOUNTRY[] = "RELEASECOUNTRY";
const char wxCueTag::Name::COMMENT[] = "COMMENT";
const char wxCueTag::Name::RIPPER[] = "RIPPER";
const char wxCueTag::Name::PREPARER[] = "PREPARER";
const char wxCueTag::Name::DR14[] = "DR14";
const char wxCueTag::Name::DR14_ALBUM[] = "DR14_ALBUM";

// ===============================================================================

const wxCueTag::SOURCE2TEXT wxCueTag::SOURCE2TEXT_MAPPING[] =
{
    { TAG_UNKNOWN, "Unknown" },
    { TAG_CD_TEXT, "CD-TEXT" },
    { TAG_CUE_COMMENT, "CUE Comment" },
    { TAG_MEDIA_METADATA, "Media metadata" },
    { TAG_AUTO_GENERATED, "Automatically generated" }
};

// ===============================================================================

wxString wxCueTag::SourceToString(wxCueTag::TAG_SOURCE source)
{
    return SourceToString(source, SOURCE2TEXT_MAPPING);
}

wxString wxCueTag::SourcesToString(wxCueTag::TagSources tagSources)
{
    return SourcesToString(tagSources, SOURCE2TEXT_MAPPING);
}

bool wxCueTag::TestTagSources(wxCueTag::TagSources sources, wxCueTag::TagSources mask)
{
    return (sources & mask) == mask;
}

wxCueTag::wxCueTag():
    m_source(TAG_UNKNOWN), m_multiline(false)
{
}

wxCueTag::wxCueTag(wxCueTag::TAG_SOURCE source, const wxString& name, const wxString& value):
    m_source(source), m_name(name.Upper())
{
    SetValue(value);
}

wxCueTag::wxCueTag(const wxCueTag& cueTag)
{
    copy(cueTag);
}

wxCueTag::TAG_SOURCE wxCueTag::GetSource() const
{
    return m_source;
}

wxString wxCueTag::GetSourceAsString() const
{
    return SourceToString(m_source);
}

bool wxCueTag::TestSource(wxCueTag::TagSources nTagSources) const
{
    return TestTagSources(nTagSources, m_source);
}

bool wxCueTag::IsAutoGenerated() const
{
    return TestSource(TAG_AUTO_GENERATED);
}

const wxString& wxCueTag::GetName() const
{
    return m_name;
}

const wxString& wxCueTag::GetValue() const
{
    return m_value;
}

namespace
{
    wxMemoryBuffer memory_stream_to_buffer(const wxMemoryOutputStream& os)
    {
        size_t         nSize = os.GetLength();
        wxMemoryBuffer data(nSize);
        void* pData = data.GetWriteBuf(nSize);

        os.CopyTo(pData, nSize);
        data.UngetWriteBuf(nSize);
        return data;
    }
}

wxString wxCueTag::GetValueBase64() const
{
    wxMemoryOutputStream mos;
    wxTextOutputStream   tos(mos, wxEOL_UNIX, wxConvUTF8);

    wxTextOutputStreamOnString::SaveTo(tos, m_value);

    wxString      s = wxBase64Encode(memory_stream_to_buffer(mos));
    wxArrayString as;
    wxString      l;

    return wxBase64Encode(memory_stream_to_buffer(mos));
}

void wxCueTag::GetValueBase64(size_t nLineLen, wxArrayString& strings) const
{
    wxString s = GetValueBase64();
    wxString l;

    strings.Empty();
    while (!s.IsEmpty())
    {
        l = s.Left(nLineLen);
        strings.Add(l);
        s.Remove(0, l.Len());
    }
}

const wxCueTag& wxCueTag::GetValue(wxArrayString& lines) const
{
    if (m_multiline)
    {
        wxTextInputStreamOnString tis(m_value);
        while (!tis.Eof())
        {
            lines.Add((*tis).ReadLine());
        }
    }
    else
    {
        lines.Add(m_value);
    }

    return *this;
}

wxString wxCueTag::GetQuotedValue(bool escape) const
{
    if (escape)
    {
        return Quote(Escape(m_value));
    }
    else
    {
        return Quote(m_value);
    }
}

wxString wxCueTag::GetFlattenValue() const
{
    return GetFlattenValue('/');
}

wxString wxCueTag::GetFlattenValue(const wxString& separator) const
{
    if (m_multiline)
    {
        wxTextInputStreamOnString  tis(m_value);
        wxTextOutputStreamOnString tos;
        wxTextStreamUtils::Copy(tis.GetStream(), tos.GetStream(), separator);
        wxString out(tos.GetString());
        return out.Truncate(out.Length() - separator.Length());
    }
    else
    {
        return m_value;
    }
}

wxCueTag& wxCueTag::SetSource(wxCueTag::TAG_SOURCE source)
{
    m_source = source;
    return *this;
}

wxCueTag& wxCueTag::SetName(const wxString& name)
{
    m_name = name.Upper();
    return *this;
}

wxCueTag& wxCueTag::SetValue(const wxString& value)
{
    wxTextInputStreamOnString  tis(value);
    wxTextOutputStreamOnString tos;
    const size_t linesNo = wxTextStreamUtils::Copy(tis.GetStream(), tos.GetStream());

    if (linesNo > 1)
    {
        m_value = tos.GetString();
        m_multiline = true;
    }
    else
    {
        m_value = value;
        m_multiline = false;
    }

    return *this;
}

void wxCueTag::copy(const wxCueTag& cueTag)
{
    m_source = cueTag.m_source;
    m_name = cueTag.m_name;
    m_value = cueTag.m_value;
    m_multiline = cueTag.m_multiline;
}

wxCueTag& wxCueTag::operator =(const wxCueTag& cueTag)
{
    copy(cueTag);
    return *this;
}

bool wxCueTag::operator ==(const wxCueTag& tag) const
{
    return
        m_name.CmpNoCase(tag.m_name) == 0 &&
        m_value.Cmp(tag.m_value) == 0;
}

bool wxCueTag::operator ==(const wxString& tagName) const
{
    return m_name.CmpNoCase(tagName) == 0;
}

bool wxCueTag::operator !=(const wxString& tagName) const
{
    return m_name.CmpNoCase(tagName) != 0;
}

bool wxCueTag::IsMultiline() const
{
    return m_multiline;
}

void wxCueTag::Correct(const wxStringProcessor& processor)
{
    processor(m_value);
}

wxString wxCueTag::Escape(const wxString& value)
{
    wxString s(value);

    s.Replace('\"', "\\\"");
    s.Replace('\'', "\\'");
    s.Replace('\\', "\\\\");
    return s;
}

wxString wxCueTag::UnEscape(const wxString& value)
{
    wxString s(value);

    s.Replace("\\'", '\'');
    s.Replace("\\\"", '\"');
    s.Replace("\\\\", '\\');
    return s;
}

wxString wxCueTag::Quote(const wxString& value)
{
    wxString res(value);
    return res.Prepend('"').Append('"');
}

size_t wxCueTag::GetTags(const wxArrayCueTag& sourceTags, const wxString& tagName, wxArrayCueTag& tags)
{
    size_t nCounter = 0;

    for (size_t i = 0, cnt = sourceTags.GetCount(); i < cnt; ++i)
    {
        if (sourceTags[i] == tagName)
        {
            AddTag(tags, sourceTags[i]);
            nCounter += 1;
        }
    }

    return nCounter;
}

size_t wxCueTag::GetTags(const wxArrayCueTag& sourceTags, wxCueTag::TagSources sources, const wxString& tagName, wxArrayCueTag& tags)
{
    size_t nCounter = 0;

    for (size_t i = 0, cnt = sourceTags.GetCount(); i < cnt; ++i)
    {
        if (sourceTags[i].TestSource(sources) && sourceTags[i] == tagName)
        {
            AddTag(tags, sourceTags[i]);
            nCounter += 1;
        }
    }

    return nCounter;
}

size_t wxCueTag::MoveTags(wxArrayCueTag& sourceTags, const wxString& tagName, wxArrayCueTag& tags)
{
    size_t nCounter = 0;

    for (size_t i = 0, cnt = sourceTags.GetCount(); i < cnt; ++i)
    {
        if (sourceTags[i] == tagName)
        {
            AddTag(tags, sourceTags[i]);
            sourceTags.RemoveAt(i);

            nCounter += 1;
            cnt -= 1;
            i -= 1;
        }
    }

    return nCounter;
}

size_t wxCueTag::MoveTags(wxArrayCueTag& sourceTags, const wxTagSynonimsCollection& tagSynonims, wxArrayCueTag& tags)
{
    size_t nCounter = 0;

    wxCueTag tag;

    for (size_t i = 0, cnt = sourceTags.GetCount(); i < cnt; ++i)
    {
        if (tagSynonims.GetName(sourceTags[i], tag))
        {
            AddTag(tags, tag);
            sourceTags.RemoveAt(i);

            nCounter += 1;
            cnt -= 1;
            i -= 1;
        }
    }

    return nCounter;
}

bool wxCueTag::FindTag(const wxArrayCueTag& tags, const wxCueTag& cueTag)
{
    for (size_t i = 0, cnt = tags.GetCount(); i < cnt; ++i)
    {
        if (tags[i] == cueTag) return true;
    }

    return false;
}

bool wxCueTag::AddTag(wxArrayCueTag& tags, const wxCueTag& cueTag)
{
    if (!FindTag(tags, cueTag))
    {
        tags.Add(cueTag);
        return true;
    }

    return false;
}

bool wxCueTag::AddTagIf(wxArrayCueTag& tags, const wxCueTag& tagToAdd, const wxCueTag& tagToCheck)
{
    if (FindTag(tags, tagToCheck))
    {
        return AddTag(tags, tagToAdd);
    }
    else
    {
        return false;
    }
}

bool wxCueTag::AddTagIfAndRemove(wxArrayCueTag& tags, const wxCueTag& tagToAdd, const wxCueTag& tagToCheck)
{
    if (FindTag(tags, tagToCheck))
    {
        RemoveTag(tags, tagToCheck);
        return AddTag(tags, tagToAdd);
    }
    else
    {
        return false;
    }
}

size_t wxCueTag::RemoveTag(wxArrayCueTag& tags, const wxCueTag& cueTag)
{
    size_t counter = 0;

    for (size_t i = 0, cnt = tags.GetCount(); i < cnt; ++i)
    {
        if (tags[i] == cueTag)
        {
            tags.RemoveAt(i);

            counter += 1;
            cnt -= 1;
            i -= 1;
        }
    }

    return counter;
}

size_t wxCueTag::RemoveTag(wxArrayCueTag& tags, const wxString& tagName)
{
    size_t counter = 0;

    for (size_t i = 0, cnt = tags.GetCount(); i < cnt; ++i)
    {
        if (tags[i] == tagName)
        {
            tags.RemoveAt(i);

            counter += 1;
            cnt -= 1;
            i -= 1;
        }
    }

    return counter;
}

void wxCueTag::AddTags(wxArrayCueTag& tags, const wxArrayCueTag& newTags)
{
    for (size_t i = 0, cnt = newTags.GetCount(); i < cnt; ++i)
    {
        AddTag(tags, newTags[i]);
    }
}

void wxCueTag::AddTags(wxArrayCueTag& tags, const wxHashArrayCueTag& tagsHash)
{
    for (wxHashArrayCueTag::const_iterator i = tagsHash.begin(), end = tagsHash.end(); i != end; ++i)
    {
        AddTags(tags, i->second);
    }
}

size_t wxCueTag::RemoveTags(wxArrayCueTag& tags, const wxArrayCueTag& tagsToDelete)
{
    size_t counter = 0;

    for (size_t i = 0, cnt = tagsToDelete.GetCount(); i < cnt; ++i)
    {
        counter += RemoveTag(tags, tagsToDelete[i]);
    }

    return counter;
}

void wxCueTag::CommonTags(wxArrayCueTag& commonTags, const wxArrayCueTag& group1, const wxArrayCueTag& group2)
{
    commonTags.Clear();
    for (size_t i = 0, cnt = group1.GetCount(); i < cnt; ++i)
    {
        if (FindTag(group2, group1[i]))
        {
            commonTags.Add(group1[i]);
        }
    }
}

bool wxCueTag::FindCommonPart(wxCueTag& commonTag, const wxCueTag& tag1, const wxCueTag& tag2)
{
    wxASSERT(tag1 == tag2.GetName());

    wxString value1(tag1.GetValue()), value2(tag2.GetValue());

    size_t len = value1.Length();

    if (value2.Length() < len) len = value2.Length();
    if (len == 0u) return false;

    value1.Truncate(len);
    value2.Truncate(len);
    for (size_t i = len; i > 0; i--, value1.RemoveLast(), value2.RemoveLast())
    {
        if (value1.CmpNoCase(value2) == 0)
        {
            commonTag.SetSource(wxCueTag::TAG_AUTO_GENERATED)
                .SetName(tag1.GetName())
                .SetValue(value1);

            return true;
        }
    }

    return false;
}

wxString wxCueTag::GetFlattenValues(const wxArrayCueTag& tags, const wxString& separator)
{
    size_t nCount = tags.GetCount();

    if (nCount > 0)
    {
        wxString sResult;
        size_t   nUpperBound = nCount - 1;

        for (size_t i = 0; i < nUpperBound; ++i)
        {
            sResult << tags[i].GetFlattenValue(separator) << separator;
        }

        sResult << tags[nUpperBound].GetFlattenValue(separator);
        return sResult;
    }
    else
    {
        return wxEmptyString;
    }
}

bool wxCueTag::IsReplayGain() const
{
    return m_name.StartsWith("REPLAYGAIN_") ||
        (m_name.CmpNoCase(Name::DR14) == 0) ||
        (m_name.CmpNoCase(Name::DR14_ALBUM) == 0);
}

bool wxCueTag::IsRipperComment() const
{
    if (m_name != Name::COMMENT) return false;
    if (IsMultiline()) return false;
    return m_value.StartsWith("ExactAudioCopy") ||
        m_value.StartsWith("Exact Audio Copy") ||
        m_value.StartsWith("CUERipper");
}

bool wxCueTag::IsITunes() const
{
    return m_name.StartsWith("ITUNES");
}

bool wxCueTag::Split(const wxCueTag& tag, wxArrayCueTag& tags)
{
    if (tag != Name::DISCNUMBER) return false;

    wxStringTokenizer tokenizer(tag.GetValue(), '/');

    if (tokenizer.CountTokens() == 2)
    {
        const wxString discNumber = tokenizer.GetNextToken();
        const wxString totalDiscs = tokenizer.GetNextToken();

        if (!(discNumber.IsEmpty() || totalDiscs.IsEmpty()))
        {
            const wxCueTag discNumberTag(tag.GetSource(), Name::DISCNUMBER, discNumber);
            const wxCueTag totalDiscsTag(tag.GetSource(), Name::TOTALDISCS, totalDiscs);

            tags.Add(discNumberTag);
            tags.Add(totalDiscsTag);

            return true;
        }
    }

    return false;
}

bool wxCueTag::Split(wxArrayCueTag& tags) const
{
    return Split(*this, tags);
}

wxCueTag wxCueTag::Rename(const wxString& newName) const
{
    return wxCueTag(m_source, newName, m_value);
}

#include <wx/arrimpl.cpp>
WX_DEFINE_OBJARRAY(wxArrayCueTag);

